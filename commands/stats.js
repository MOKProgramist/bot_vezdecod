//–∑–¥–µ—Å—å –∏ –±—É–¥–µ—Ç –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã
const {VK, Keyboard, KeyboardBuilder} = require('vk-io')
const { Command } = require('commander-core');
const {User, MemeScores} = require('../Model/Model');

//–ø–æ –∂–µ–ª–∞–Ω–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—ä—è–≤–∏—Ç—å —Ç—É—Ç –º–∞—Å—Å–∏–≤ –∏–∑ –∫–æ–º–∞–Ω–¥
module.exports = new Command({
  pattern: /^(?:—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|stats)$/i,
  name: '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤',
  description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
  async handler(context, bot) {
    try {
    const user = await User.findOne({
      where: {
          id_vk: context.senderId
      }
    });

    const scores = await MemeScores.findAll({
        userId: user.id
    });

    if(!scores) return context.send('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–º" –∏ –æ—Ü–µ–Ω–∏ –µ–≥–æ!');

    // –º–∞—Å—Å–∏–≤ –æ—Ü–µ–Ω–æ–∫
    let countLike = 0; let countDis = 0;
    scores.forEach(el => {
        // –µ—Å–ª–∏ –ª–∞–π–∫
        if(el.like) countLike++;
        // –µ—Å–ª–∏ –¥–∏–∑
        if(!el.like) countDis++;
    })

    return context.send(`–°—Ç–∞—Ç–∏—Ç—Å–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –í—Å–µ–≥–æ —Ç—ã –æ—Ü–µ–Ω–∏–ª ${countLike + countDis} ${bot.declOfNum(countLike + countDis, ["–º–µ–º", "–º–µ–º–∞", "–º–µ–º–æ–≤"])}\n\nüëç${countLike}\nüëé${countDis}\n\n`);
  } catch(err) {
    console.error(err);
    return context.send('Error!)');
  }
  },
}); 