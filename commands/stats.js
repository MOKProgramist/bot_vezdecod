//–∑–¥–µ—Å—å –∏ –±—É–¥–µ—Ç –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã
const {VK, Keyboard, KeyboardBuilder} = require('vk-io')
const { Command } = require('commander-core');
const {User, MemeScores, Memes} = require('../Model/Model');

//–ø–æ –∂–µ–ª–∞–Ω–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—ä—è–≤–∏—Ç—å —Ç—É—Ç –º–∞—Å—Å–∏–≤ –∏–∑ –∫–æ–º–∞–Ω–¥
module.exports = new Command({
  pattern: /^(?:—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|stats)$/i,
  name: '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤',
  description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
  async handler(context, bot) {
    try {
    const user = await User.findOne({
      where: {
          id_vk: context.senderId
      }
    });

    const scoresUser = await MemeScores.findAll({
        where: {
            userId: user.id
        }
    });
    // console.log(scoresUser)
    const scoresUsers = await MemeScores.findAll();

    // if(!scores) return context.send('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–º" –∏ –æ—Ü–µ–Ω–∏ –µ–≥–æ!');

    // –æ–±—â–∞—è —Å—Ç–∞—Ç–∞
    var countLike = 0; let countDis = 0;
    if(scoresUsers) {
        scoresUsers.forEach(el => {
            // –µ—Å–ª–∏ –ª–∞–π–∫
            if(el.like) countLike++;
            // –µ—Å–ª–∏ –¥–∏–∑
            if(!el.like) countDis++;
        })
    }
    // –º–∞—Å—Å–∏–≤ –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    var countLikeUser = 0; let countDisUser = 0;
    if(scoresUser != null) {
        scoresUser.forEach(el => {
            // –µ—Å–ª–∏ –ª–∞–π–∫
            // console.log(el.id)
            if(el.like) countLikeUser++;
            // –µ—Å–ª–∏ –¥–∏–∑
            if(!el.like) countDisUser++;
        })
    }
    let text = (countLikeUser > 0 || countDisUser > 0 ? 
        `–í—Å–µ–≥–æ —Ç—ã –æ—Ü–µ–Ω–∏–ª ${countLikeUser + countDisUser} ${bot.declOfNum(countLikeUser + countDisUser, ["–º–µ–º", "–º–µ–º–∞", "–º–µ–º–æ–≤"])}\n${countLikeUser} üëç\n${countDisUser} üëé\n\n` : `–¢—ã –ø–æ–∫–∞ –Ω–µ —Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫–∏`)
    context.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏:\n${countLike} üëç\n${countDis} üëé\n\n${text}`);

    // —Å–∞–º—ã–µ –∑–∞–ª–∞–π–∫–∞–Ω—ã–µ –º–µ–º—ã
    const memTop9 = await Memes.findAll({
        limit: 9,
        order: [
            ['like_count', 'DESC'],
        ],
    });
    // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Ä–ª —Ñ–æ—Ç–æ–∫
    const arrayPhoto = new Array();
    memTop9.forEach(el => {
        arrayPhoto.push(`photo${el.link}`);
    });

    // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–∫
    context.send({
        message: '–¢–æ–ø 9 –º–µ–º–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ',
        attachment: arrayPhoto.join(',')
    });
    // console.log(arrayPhoto.join(','))
  } catch(err) {
    console.error(err);
    return context.send('Error!)');
  }
  },
}); 